services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app_chat
      - api
      - authserver
    networks:
      - proxy

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "Aa123456789"
      ACCEPT_EULA: "Y"
    volumes:
      - sql_data:/var/opt/mssql
    expose:
      - "1433"
    networks:
      - sqlserver-net

  authserver:
    build:
      context: ../..
      dockerfile: src/Authentication/Oauth2.DockerFile
    container_name: oauth2
    depends_on:
      - sqlserver
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=AuthServer;User=sa;Password=Aa123456789;TrustServerCertificate=true;
      - Authentication__Schemes__Bearer__ValidAudiences__0=http://api:5001
      - Authentication__Schemes__Bearer__ValidIssuer=data-cooking-api
      - Authentication__Schemes__Bearer__SigningSecurityKey=yY~/O<W2adXB:,&rK]ruq+Bt0+yjjwYg&IVZW{]Feti)IdV@KS,?+vBo%on[IFb
      - Authentication__Schemes__Bearer__AccessTokenExpiries=30
      - Authentication__Schemes__Bearer__RefreshTokenExpiries=30
      - MailService__Email=datacookingemail@gmail.com
      - MailService__Name=DataCooking.ai
      # - MailService__Brevo__ApiKey=
      - MailService__Brevo__Host=https://api.brevo.com
    volumes:
      - dataprotection-keys:/root/.aspnet/DataProtection-Keys
    command: >
      sh -c "until /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Aa123456789 -Q 'SELECT 1'
      do echo 'Waiting for SQL Server...'; sleep 5; done &&
      dotnet AuthServer.dll"
    networks:
      - proxy
      - sqlserver-net

  api:
    build:
      context: ../..
      dockerfile: src/docker/data-cooking.Dockerfile
    container_name: chatservice_api
    working_dir: /app
    volumes:
      - ../../src/API/ChatService:/app
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg://postgres:postgres@db:5432/DataCooking
      # - CHAT_GPTs_API_KEY=
      - CHAT_GPTs_MODEL=gpt-4o
      - KAFKA_BOOTSTRAP=kafka:29092
      - AUTH_AUTHORITY=http://authserver:80
      - AUTH_AUDIENCE=api
    depends_on:
      - db
      - kafka
      - authserver
    networks:
      - proxy
      - kafka-net
      - redis-net
      - postgresql-net

  db:
    image: postgres:16
    container_name: datacooking_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: DataCooking
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - postgresql-net

  redis:
    image: redis:7
    container_name: datacooking_redis
    restart: always
    volumes:
      - redisdata:/data
    expose:
      - "6379"
    networks:
      - redis-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: datacooking_kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - CLUSTER_ID=1iPJsi1kQb24VY5a1o0j3A
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafkadata:/var/lib/kafka/data
    command:
      - bash
      - -c
      - |
        if [ ! -f "/var/lib/kafka/data/meta.properties" ]; then
          CLUSTER_ID=$$(kafka-storage random-uuid)
          echo "Formatting storage with cluster id $$CLUSTER_ID"
          kafka-storage format --ignore-formatted --cluster-id $$CLUSTER_ID --config /etc/kafka/kafka.properties
        fi
        /etc/confluent/docker/run
    networks:
      - kafka-net

  app_chat:
    build:
      context: ../web
      dockerfile: dockerfile.Dockerfile
    container_name: app_chat
    working_dir: /app
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: http://api:5002
    restart: unless-stopped
    networks:
      - proxy

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: datacooking_kafdrop
    restart: always
    environment:
      - KAFKA_BROKERCONNECT=kafka:29092
    depends_on:
      - kafka
    networks:
      - kafka-net

volumes:
  pgdata:
  redisdata:
  kafkadata:
  sql_data:
  dataprotection-keys:

networks:
  proxy:
    driver: bridge
  kafka-net:
    driver: bridge
  redis-net:
    driver: bridge
  sqlserver-net:
    driver: bridge
  postgresql-net:
    driver: bridge
