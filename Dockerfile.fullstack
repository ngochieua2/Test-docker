# Multi-stage Dockerfile for Full Stack Application
# This creates a single image containing Backend, Frontend, and Database components

FROM node:18-alpine AS frontend-builder

# Build Frontend
WORKDIR /app/frontend
COPY frontend/package.json frontend/package-lock.json* ./
RUN npm ci

COPY frontend/ ./
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

# Backend Python Image
FROM python:3.11-slim AS backend-base

# Install system dependencies for backend
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    unixodbc \
    unixodbc-dev \
    curl \
    gnupg \
    nginx \
    supervisor \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install Microsoft ODBC Driver for SQL Server
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y msodbcsql18 \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for frontend serving
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt ./backend/
RUN pip install --no-cache-dir -r backend/requirements.txt

# Copy backend code
COPY backend/ ./backend/

# Copy built frontend
COPY --from=frontend-builder /app/frontend/.next/standalone ./frontend/
COPY --from=frontend-builder /app/frontend/.next/static ./frontend/.next/static
COPY --from=frontend-builder /app/frontend/public ./frontend/public

# Install PM2 for process management
RUN npm install -g pm2

# Create nginx configuration
RUN mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

COPY <<EOF /etc/nginx/sites-available/default
server {
    listen 80;
    server_name localhost;

    # Frontend (Next.js)
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Health check endpoints
    location /health {
        proxy_pass http://localhost:3000/health;
    }

    location /api/health {
        proxy_pass http://localhost:8000/health;
    }
}
EOF

RUN ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/

# Create PM2 ecosystem file
COPY <<EOF /app/ecosystem.config.js
module.exports = {
  apps: [
    {
      name: 'backend',
      cwd: '/app/backend',
      script: 'uvicorn',
      args: 'main:app --host 0.0.0.0 --port 8000',
      interpreter: 'python3',
      env: {
        POSTGRES_URL: process.env.POSTGRES_URL || "postgresql://postgres:postgres@localhost:5432/postgres",
        SQLSERVER_URL: process.env.SQLSERVER_URL || "mssql+pyodbc://sa:YourStrong@Passw0rd@localhost:1433/master?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes"
      }
    },
    {
      name: 'frontend',
      cwd: '/app/frontend',
      script: 'server.js',
      interpreter: 'node',
      env: {
        PORT: 3000,
        HOSTNAME: '0.0.0.0',
        NEXT_PUBLIC_API_URL: 'http://localhost/api'
      }
    }
  ]
};
EOF

# Create supervisord configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx.err.log
stdout_logfile=/var/log/nginx.out.log

[program:pm2]
command=pm2-runtime start /app/ecosystem.config.js
directory=/app
autostart=true
autorestart=true
stderr_logfile=/var/log/pm2.err.log
stdout_logfile=/var/log/pm2.out.log
EOF

# Create startup script
COPY <<EOF /app/start.sh
#!/bin/bash

# Wait for external databases if URLs are provided
if [[ "\$POSTGRES_URL" == *"@postgresql:"* ]]; then
    echo "Waiting for PostgreSQL..."
    until curl -f postgresql:5432 2>/dev/null; do
        sleep 1
    done
fi

if [[ "\$SQLSERVER_URL" == *"@sqlserver:"* ]]; then
    echo "Waiting for SQL Server..."
    until curl -f sqlserver:1433 2>/dev/null; do
        sleep 1
    done
fi

# Start supervisord
exec supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /app/start.sh

# Expose ports
EXPOSE 80 3000 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health && curl -f http://localhost/api/health || exit 1

# Start the application
CMD ["/app/start.sh"]